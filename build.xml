<project name="StreamCorpusIndexer" default="scripts"
         xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant" basedir=".">
  <description>Wikipedia Analysis Using Edit and View Logs</description>
	
  <property name="lib.dir" value="lib" />
  <property name="local-lib.dir" value="ivy/local-repo" />
  <property name="project.encoding" value="UTF-8"/>
  <property name="build.dir" value="bin"/>
  <property name="src.dir" value="src"/>
  <property name="dist.dir" value="bin"/>
  <property name="etc.dir" value="etc"/>
  <property name="data.dir" value="data"/>
  <property name="test.dir" location="java/test" />
  <property name="junit.report.dir" location="test/reports" />
  <property name="testdata.dir" value="test/data"/>
  <property name="javadoc.dir" location="docs/api/" />
  <property name="version" value="0.1-SNAPSHOT"/>

  <!-- paths used for compilation and run  -->
  <path id="lib.path.id">
    <fileset dir="${lib.dir}" />
  	<fileset dir="${local-lib.dir}" />
  </path>
  <path id="libjars.path.id">
    <fileset dir="${lib.dir}/" includes="*.jar"/>
    <fileset dir="${local-lib.dir}/" includes="*.jar"/> 
  </path>
  <path id="run.classpath">
  	<path refid="libjars.path.id"/>
  	<pathelement location="${build.dir}"/>
  	<pathelement location="${etc.dir}"/>
  	<pathelement location="${data.dir}"/>
  </path>
	
  <!-- paths used for generating Hadoop scripts -->
  <path id="scripts.path.id">
    <fileset dir="${lib.dir}" excludes="*hadoop* *jersey*" />
  	<fileset dir="${local-lib.dir}" />
  </path>
  <path id="scriptjars.path.id">
    <fileset dir="${lib.dir}" includes="*.jar">
      <exclude name = "*hadoop*"/>
      <exclude name = "*jersey*"/>
    </fileset>
    <fileset dir="${dist.dir}" includes="*.jar" />
    <fileset dir="${local-lib.dir}" includes="*.jar" />
  </path>	
  <path id="test.classpath">
  	<path refid="run.classpath"/>
  	<pathelement location="${testdata.dir}"/>
  </path>
	
  <property name="maven.ant.task.version" value="2.1.2"/>
  <property name="maven.jar.dir" value="${basedir}/${lib.dir}"/>
  <property name="maven.jar.file" value="${maven.jar.dir}/maven.jar"/>

  <property name="ivy.install.version" value="2.2.0"/>
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
  <property name="ivy.settings.file" value="${basedir}/ivy/ivysettings.xml" />
  <property name="ivy.dep.file" value="${basedir}/ivy/ivy.xml" />

  <!-- define Maven coordinates, repository url and artifacts name etc -->
  <property name="groupId" value="de.l3s.streamcorpus" />
  <property name="artifactId" value="streamcorpus-indexer" />
  <property name="version" value="${version}" />

  <property name="maven-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2" />
  <property name="maven-repository-id" value="sonatype-nexus-staging" />
  <property name="maven-jar" value="${dist.dir}/${artifactId}-${version}.jar" />
  <property name="maven-javadoc-jar" value="${dist.dir}/${artifactId}-${version}-javadoc.jar" />
  <property name="maven-sources-jar" value="${dist.dir}/${artifactId}-${version}-sources.jar" />

  <target name="init" depends="clean">
    <tstamp />
    <condition property="platform" value="unix">
      <os family="unix" />
    </condition>
    <condition property="platform" value="mac">
      <os family="mac" />
    </condition>
    <condition property="platform" value="windows">
      <os family="windows" />
    </condition>
    <mkdir dir="${build.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${junit.report.dir}" />
  </target>

  <!-- download Ivy from web site so that it can be used even without any special installation -->
  <target name="download-ivy" unless="skip.download">
    <echo message="installing ivy..."/>
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
       it into ant's lib dir (note that the latter copy will always take precedence).
       We will not fail as long as local lib dir exists (it may be empty) and
       ivy is in at least one of ant's lib dir or the local lib dir. -->
  <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <!-- download maven from web site so that it can be used even without any special installation -->
  <target name="download-maven" depends="init" unless="skip.download">
    <mkdir dir="${maven.jar.dir}"/>
    <echo message="installing maven ant tasks..."/>
    <get src="http://repo1.maven.org/maven2/org/apache/maven/maven-ant-tasks/${maven.ant.task.version}/maven-ant-tasks-${maven.ant.task.version}.jar"
         dest="${maven.jar.file}" usetimestamp="true"/>
  </target>

  <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
       it into ant's lib dir (note that the latter copy will always take precedence).
       We will not fail as long as local lib dir exists (it may be empty) and
       ivy is in at least one of ant's lib dir or the local lib dir. -->
  <target name="install-maven" depends="download-maven" description="--> install ivy">
    <path id="maven.lib.path">
      <fileset dir="${maven.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.lib.path"/>
  </target>

  <target name="resolve" depends="install-ivy" description="--> retrieve dependencies" unless="skip.resolve">
    <ivy:retrieve conf="default"/>
  </target>
	
  <target name="report" depends="resolve" description="--> generates a report of dependencies">
      <ivy:report todir="${build.dir}"/>
  </target>

  <target name="compile" depends="init, resolve" description="compile the source ">
    <javac target="1.7" encoding="${project.encoding}" classpathref="lib.path.id" srcdir="${src.dir}" destdir="${build.dir}" optimize="on" debug="on" includeantruntime="true">
      <compilerarg value="-Xlint:unchecked" />
    </javac>
    <copy todir="${build.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java" />
    </copy>
  </target>

  <target name="jar" depends="compile" description="generate the distribution">
    <jar jarfile="${dist.dir}/${artifactId}-${version}.jar" basedir="${build.dir}"/>  	 
  </target>
		
  <target name="copy-local-ivy-to-lib">
  	<copy todir="${lib.dir}">
  	    <fileset dir="${local-lib.dir}" includes="**"/>
  	</copy> 
  </target>
	
  <target name="fatjar" depends="compile" description="generate the single jar">
	<jar jarfile="${dist.dir}/${artifactId}-${version}-fat.jar" basedir="${build.dir}">
	  <zipgroupfileset dir="${local-lib.dir}" includes="*.jar"/>
		<zipgroupfileset dir="${lib.dir}" includes="*.jar"/>
		<manifest>
		   <attribute name="Main-Class" value="de.l3s.streamcorpus.StreamCorpusIndexing"/>
		</manifest>
	</jar>
  </target>
  	
  <target name="dist" depends="jar, javadoc" description="generate the distribution">
    <jar jarfile="${dist.dir}/${groupId}-${artifactId}-${version}-sources.jar" basedir="${src.dir}" />
    <jar jarfile="${dist.dir}/${groupId}-${artifactId}-${version}-javadoc.jar" basedir="${javadoc.dir}" />
  </target>
  <target name="javadoc" depends="jar">
	<javadoc destdir="${javadoc.dir}" access="public" use="true" notree="false" nonavbar="false" noindex="false" splitindex="no" author="true" version="true" nodeprecatedlist="false" nodeprecated="false" classpathref="lib.path.id">
	  <fileset dir="${src.dir}">
	    <include name="**/*.java" />
	    <exclude name="**/*Test.java" />
	    <exclude name="**/benchmark/*.java" />
	  </fileset>
	  <!-- <link href="http://download.oracle.com/javase/6/docs/api/" />
	  <link href="http://hadoop.apache.org/common/docs/r0.20.1/api/" />
	   <link href="http://fastutil.dsi.unimi.it/docs/" /> -->
	</javadoc>
  </target>

  <target name="scripts" depends="jar">
	<pathconvert property="scripts.path.id" refid="scripts.path.id" targetos="${platform}" />
	<pathconvert property="scriptjars.path.id" refid="scriptjars.path.id" targetos="${platform}" pathsep="," />

	<property name="suffix" value="sh" />
	<property name="param_prefix" value="$" />
	<property name="cp_sep" value=":" />
	<property name="java_command" value="java -Xmx4g -classpath &quot;${run.path.id}&quot;" />
	<property name="script_prefix" value="#!/bin/sh${line.separator}export HADOOP_CLASSPATH=&quot;${scripts.path.id}:$HADOOP_CLASSPATH&quot;${line.separator}export HADOOP_CLIENT_OPTS=&quot;-Xmx2048m $HADOOP_CLIENT_OPTS&quot;${line.separator}" />

	<echo file="./etc/junit.${suffix}" message="${script_prefix}" />
	<echo file="./etc/junit.${suffix}" message="${java_command} org.junit.runner.JUnitCore " append="true" />
	<echo file="./etc/junit.${suffix}" message="${param_prefix}1" append="true" />

	<echo file="./etc/hadoop-local.${suffix}" message="${script_prefix}" />
	<echo file="./etc/hadoop-local.${suffix}" message="hadoop jar ${basedir}/${dist.dir}/${artifactId}-${version}.jar ${param_prefix}1 -D mapreduce.framework.name=local -D mapreduce.jobtracker.address=local -D fs.default.name=file:/// -D mapreduce.cluster.local.dir=/tmp/mapred/local -D mapreduce.cluster.temp.dir=/tmp/mapred/temp -D mapreduce.jobtracker.staging.root.dir=/tmp/mapred/staging -D mapreduce.jobtracker.system.dir=/tmp/mapred/system ${param_prefix}2 ${param_prefix}3 ${param_prefix}4 ${param_prefix}5 ${param_prefix}6 ${param_prefix}7 ${param_prefix}8 ${param_prefix}9 ${param_prefix}{10} ${param_prefix}{11} ${param_prefix}{12} ${param_prefix}{13} ${param_prefix}{14} ${param_prefix}{15} ${param_prefix}{16} ${param_prefix}{17} ${param_prefix}{18} ${param_prefix}{19} ${param_prefix}{20}${line.separator}" append="true" />

	<echo file="./etc/hadoop-cluster.${suffix}" message="${script_prefix}" />
  <echo file="./etc/hadoop-cluster.${suffix}" message="export HADOOP_MAPRED_HOME=&quot;/opt/cloudera/parcels/CDH/lib/hadoop-0.20-mapreduce&quot;${line.separator}" append="true"/>
	<echo file="./etc/hadoop-cluster.${suffix}" message="hadoop jar ${basedir}/${dist.dir}/${artifactId}-${version}.jar ${param_prefix}1 -libjars ${scriptjars.path.id} ${param_prefix}2 ${param_prefix}3 ${param_prefix}4 ${param_prefix}5 ${param_prefix}6 ${param_prefix}7 ${param_prefix}8 ${param_prefix}9 ${param_prefix}{10} ${param_prefix}{11} ${param_prefix}{12} ${param_prefix}{13} ${param_prefix}{14} ${param_prefix}{15} ${param_prefix}{16} ${param_prefix}{17} ${param_prefix}{18} ${param_prefix}{19} ${param_prefix}{20} ${param_prefix}{21} ${param_prefix}{22} ${param_prefix}{23} ${param_prefix}{24} ${param_prefix}{25} ${param_prefix}{26} ${param_prefix}{27} ${param_prefix}{28} ${param_prefix}{29} ${param_prefix}{30}${line.separator}" append="true" />

	<chmod dir="./etc/" perm="ugo+rx" includes="**/*.sh"/>

  </target>
	

  <target name="clean" description="clean up">
    <delete dir="${build.dir}" />
    <delete dir="${lib.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${junit.report.dir}" />
    <delete dir="${javadoc.dir}" />
  </target>

  <target name="clean-cache" depends="clean" description="clean ivy cache">
  	<ivy:cleancache />
  </target>

  <target name="gen-pom" depends="install-ivy">
    <ivy:makepom ivyfile="ivy/ivy.xml" pomfile="forgetit-webservices.pom" />
  </target>

  <target name="publish-local-mac" depends="jar" description="publish jar/source to maven repo mounted personal computer">
    <ivy:publish resolver="local-m2-publish-mac" forcedeliver="true" overwrite="true" publishivy="false">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]"/>
      <artifacts pattern="pom-legacy.xml"/>
    </ivy:publish>
  </target>
	
  <target name="publish-local-debian" depends="jar" description="publish jar/source to maven repo mounted at office computer">
	<ivy:publish resolver="local-m2-publish-debian" forcedeliver="true" overwrite="true" publishivy="false">
	  <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]"/>
	  <artifacts pattern="pom-legacy.xml"/>
	</ivy:publish>
  </target>

  <target name="deploy" depends="dist,install-maven" description="deploy to Nexus">
    <!-- sign and deploy the main artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-jar}" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the sources artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-sources-jar}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-javadoc-jar}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>
  
</project>
